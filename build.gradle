plugins {
    id 'java'
    // Java 플러그인: Java 프로젝트를 빌드하고 관리하는 데 필요한 기본적인 기능을 제공합니다.
    // 소스 코드 컴파일, 테스트 실행, JAR 파일 패키징 등을 수행할 수 있습니다.
    id 'org.springframework.boot' version '3.4.4'
    // Spring Boot 플러그인: Spring Boot 애플리케이션을 개발하고 패키징하는 데 특화된 기능을 제공합니다.
    // 의존성 관리, 실행 가능한 JAR 또는 WAR 파일 생성, Spring Boot 개발 도구 지원 등을 포함합니다.
    // version '3.4.4'는 사용할 Spring Boot 플러그인의 버전을 지정합니다.

    id 'io.spring.dependency-management' version '1.1.7'
    // Spring Dependency Management 플러그인: Spring 프로젝트의 의존성 관리를 중앙 집중화하고 일관성을 유지하는 데 도움을 줍니다.
    // Spring Boot의 의존성 버전을 자동으로 관리하고, BOM (Bill of Materials)을 활용하여 의존성 충돌을 방지합니다.
    // version '1.1.7'는 사용할 Spring Dependency Management 플러그인의 버전을 지정합니다.
}

group = 'com.example'
// 프로젝트의 그룹 ID를 정의합니다. 일반적으로 패키지 구조와 유사하게 조직의 도메인 이름을 사용합니다.
// Maven Central과 같은 저장소에서 프로젝트를 식별하는 데 사용됩니다.

version = '0.0.1-SNAPSHOT'
// 프로젝트의 버전을 정의합니다. '-SNAPSHOT'은 개발 중인 불안정한 버전을 나타냅니다.
// 릴리스 버전에서는 '-SNAPSHOT'이 제거됩니다.

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        // Java 툴체인을 설정합니다. 여기서는 Java 17 버전을 사용하여 프로젝트를 컴파일하고 실행하도록 지정합니다.
        // 이를 통해 특정 Java 버전으로 빌드를 관리할 수 있습니다.

    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
        // 'compileOnly' 설정에 'annotationProcessor' 설정을 상속받도록 지정합니다.
        // 이는 Lombok과 같은 어노테이션 프로세서를 컴파일 시에만 사용하고 런타임에는 포함하지 않도록 하기 위한 설정입니다.
    }
}

repositories {
    mavenCentral()
    // 의존성(라이브러리)을 다운로드할 Maven 중앙 저장소를 지정합니다.
    // 대부분의 공개된 Java 라이브러리들은 Maven Central에서 찾을 수 있습니다.
}

dependencies {
    // Spring Data JPA를 사용하기 위한 의존성. JPA는 자바 ORM 표준 명세이며, 데이터베이스와의 상호작용을 편리하게 해줍니다.
    // Spring Data JPA repositories, EntityManager 등을 사용할 수 있습니다.
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Thymeleaf 템플릿 엔진을 사용하기 위한 의존성. 서버 사이드에서 HTML을 동적으로 생성하고 렌더링하는 데 사용됩니다.
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Spring MVC를 포함한 웹 개발에 필요한 기본적인 의존성. RESTful API 개발, 서블릿 컨테이너 (Tomcat) 등이 포함됩니다.
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Lombok 라이브러리를 사용하기 위한 의존성. Getter, Setter, NoArgsConstructor 등과 같은 보일러플레이트 코드를 자동으로 생성해줍니다.
    // compileOnly는 컴파일 시에만 필요하고 런타임에는 포함되지 않음을 의미합니다.
    compileOnly 'org.projectlombok:lombok'

    // 개발 환경에서 유용한 도구들을 제공하는 의존성. 자동 재시작, 라이브 리로드 등이 포함되어 개발 편의성을 높여줍니다.
    // developmentOnly는 개발 환경에서만 활성화됩니다.
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // MariaDB 데이터베이스에 연결하기 위한 JDBC 드라이버 의존성. 런타임에 필요합니다.
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // Lombok 어노테이션 프로세서를 사용하기 위한 의존성. Lombok 어노테이션을 처리하여 코드를 생성합니다.
    annotationProcessor 'org.projectlombok:lombok'

    // Spring Boot 애플리케이션을 테스트하기 위한 기본적인 의존성. JUnit, Spring TestContext Framework 등이 포함됩니다.
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // JUnit 5 플랫폼 런처를 사용하기 위한 의존성. 테스트 실행을 관리합니다.
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // AWS (Amazon Web Services) 클라우드 서비스를 사용하기 위한 Spring Cloud 의존성.
    // 이 특정 버전(2.0.1.RELEASE)은 특정 AWS 서비스와의 통합을 지원합니다. (예: S3, SQS, SNS 등)
    implementation  'org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE'

    // ModelMapper 라이브러리를 사용하기 위한 의존성. 서로 다른 객체 간의 데이터 매핑을 자동화하여 편리하게 변환할 수 있도록 도와줍니다.
    implementation 'org.modelmapper:modelmapper:3.1.0'


    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'
// Thymeleaf 레이아웃 기능을 사용하기 위한 의존성을 추가합니다. 템플릿 조각을 정의하고 재사용하여 일관된 레이아웃을 만들 수 있게 해줍니다.

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
// Thymeleaf 템플릿에서 Spring Security 기능을 사용할 수 있도록 해주는 의존성을 추가합니다. 예를 들어, 사용자의 권한에 따라 내용을 보여주거나 감출 수 있습니다. Spring Security 6 버전에 맞춰 사용됩니다.

    implementation 'org.springframework.boot:spring-boot-starter-security'
// Spring Security를 사용하여 애플리케이션의 보안 기능을 구현하기 위한 핵심 의존성을 추가합니다. 인증, 인가 등을 처리할 수 있습니다.

    implementation 'org.springframework.boot:spring-boot-starter-validation'
// Bean Validation API를 사용하여 데이터 유효성 검증을 수행하기 위한 의존성을 추가합니다. 폼 입력값 등의 유효성을 간편하게 검사할 수 있습니다.





}

tasks.named('test') {
    // 'test'라는 이름을 가진 기존의 Gradle Task를 찾아서 설정합니다.
    // 일반적으로 'test' 태스크는 프로젝트의 단위 테스트를 실행하는 역할을 합니다.
    useJUnitPlatform()
    // 'test' 태스크가 JUnit Platform을 사용하여 테스트를 실행하도록 설정합니다.
    // JUnit Platform은 다양한 JUnit 엔진 (JUnit 4, JUnit Jupiter (JUnit 5), JUnit Vintage)을 지원하며,
    // 이를 통해 최신 버전의 JUnit (JUnit 5)의 기능을 활용하여 테스트를 구성하고 실행할 수 있습니다.

}
